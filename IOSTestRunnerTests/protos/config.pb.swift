// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: config.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum StockTesting_SDKPermissions: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case level1 // = 0
  case level2 // = 1
  case hk10 // = 2
  case hka1 // = 3
  case hkd1 // = 4
  case shhk1 // = 5
  case shhk5 // = 6
  case szhk1 // = 7
  case szhk5 // = 8
  case UNRECOGNIZED(Int)

  init() {
    self = .level1
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .level1
    case 1: self = .level2
    case 2: self = .hk10
    case 3: self = .hka1
    case 4: self = .hkd1
    case 5: self = .shhk1
    case 6: self = .shhk5
    case 7: self = .szhk1
    case 8: self = .szhk5
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .level1: return 0
    case .level2: return 1
    case .hk10: return 2
    case .hka1: return 3
    case .hkd1: return 4
    case .shhk1: return 5
    case .shhk5: return 6
    case .szhk1: return 7
    case .szhk5: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension StockTesting_SDKPermissions: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [StockTesting_SDKPermissions] = [
    .level1,
    .level2,
    .hk10,
    .hka1,
    .hkd1,
    .shhk1,
    .shhk5,
    .szhk1,
    .szhk5,
  ]
}

#endif  // swift(>=4.2)

struct StockTesting_SDKConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appKey: String = String()

  var sdkLevel: StockTesting_SDKPermissions = .level1

  var sdkSseLevel: StockTesting_SDKPermissions = .level1

  var hkPerms: [StockTesting_SDKPermissions] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StockTesting_TestcaseConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var testcaseID: String = String()

  var executionTimes: Int32 = 0

  var continueWhenFailed: Bool = false

  var paramStr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StockTesting_RunnerConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jobID: String {
    get {return _storage._jobID}
    set {_uniqueStorage()._jobID = newValue}
  }

  var runnerID: String {
    get {return _storage._runnerID}
    set {_uniqueStorage()._runnerID = newValue}
  }

  var sdkConfig: StockTesting_SDKConfig {
    get {return _storage._sdkConfig ?? StockTesting_SDKConfig()}
    set {_uniqueStorage()._sdkConfig = newValue}
  }
  /// Returns true if `sdkConfig` has been explicitly set.
  var hasSdkConfig: Bool {return _storage._sdkConfig != nil}
  /// Clears the value of `sdkConfig`. Subsequent reads from it will return its default value.
  mutating func clearSdkConfig() {_uniqueStorage()._sdkConfig = nil}

  var casesConfig: [StockTesting_TestcaseConfig] {
    get {return _storage._casesConfig}
    set {_uniqueStorage()._casesConfig = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stock_testing"

extension StockTesting_SDKPermissions: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LEVEL_1"),
    1: .same(proto: "LEVEL_2"),
    2: .same(proto: "HK10"),
    3: .same(proto: "HKA1"),
    4: .same(proto: "HKD1"),
    5: .same(proto: "SHHK1"),
    6: .same(proto: "SHHK5"),
    7: .same(proto: "SZHK1"),
    8: .same(proto: "SZHK5"),
  ]
}

extension StockTesting_SDKConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SDKConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "appKey"),
    2: .same(proto: "sdkLevel"),
    3: .same(proto: "sdkSseLevel"),
    4: .same(proto: "hkPerms"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.appKey)
      case 2: try decoder.decodeSingularEnumField(value: &self.sdkLevel)
      case 3: try decoder.decodeSingularEnumField(value: &self.sdkSseLevel)
      case 4: try decoder.decodeRepeatedEnumField(value: &self.hkPerms)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appKey.isEmpty {
      try visitor.visitSingularStringField(value: self.appKey, fieldNumber: 1)
    }
    if self.sdkLevel != .level1 {
      try visitor.visitSingularEnumField(value: self.sdkLevel, fieldNumber: 2)
    }
    if self.sdkSseLevel != .level1 {
      try visitor.visitSingularEnumField(value: self.sdkSseLevel, fieldNumber: 3)
    }
    if !self.hkPerms.isEmpty {
      try visitor.visitPackedEnumField(value: self.hkPerms, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StockTesting_SDKConfig, rhs: StockTesting_SDKConfig) -> Bool {
    if lhs.appKey != rhs.appKey {return false}
    if lhs.sdkLevel != rhs.sdkLevel {return false}
    if lhs.sdkSseLevel != rhs.sdkSseLevel {return false}
    if lhs.hkPerms != rhs.hkPerms {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StockTesting_TestcaseConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestcaseConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "testcaseID"),
    2: .same(proto: "executionTimes"),
    3: .same(proto: "continueWhenFailed"),
    4: .same(proto: "paramStr"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.testcaseID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.executionTimes)
      case 3: try decoder.decodeSingularBoolField(value: &self.continueWhenFailed)
      case 4: try decoder.decodeSingularStringField(value: &self.paramStr)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.testcaseID.isEmpty {
      try visitor.visitSingularStringField(value: self.testcaseID, fieldNumber: 1)
    }
    if self.executionTimes != 0 {
      try visitor.visitSingularInt32Field(value: self.executionTimes, fieldNumber: 2)
    }
    if self.continueWhenFailed != false {
      try visitor.visitSingularBoolField(value: self.continueWhenFailed, fieldNumber: 3)
    }
    if !self.paramStr.isEmpty {
      try visitor.visitSingularStringField(value: self.paramStr, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StockTesting_TestcaseConfig, rhs: StockTesting_TestcaseConfig) -> Bool {
    if lhs.testcaseID != rhs.testcaseID {return false}
    if lhs.executionTimes != rhs.executionTimes {return false}
    if lhs.continueWhenFailed != rhs.continueWhenFailed {return false}
    if lhs.paramStr != rhs.paramStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StockTesting_RunnerConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RunnerConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jobID"),
    2: .same(proto: "runnerID"),
    3: .same(proto: "sdkConfig"),
    4: .same(proto: "casesConfig"),
  ]

  fileprivate class _StorageClass {
    var _jobID: String = String()
    var _runnerID: String = String()
    var _sdkConfig: StockTesting_SDKConfig? = nil
    var _casesConfig: [StockTesting_TestcaseConfig] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _jobID = source._jobID
      _runnerID = source._runnerID
      _sdkConfig = source._sdkConfig
      _casesConfig = source._casesConfig
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._jobID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._runnerID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._sdkConfig)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._casesConfig)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._jobID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jobID, fieldNumber: 1)
      }
      if !_storage._runnerID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._runnerID, fieldNumber: 2)
      }
      if let v = _storage._sdkConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._casesConfig.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._casesConfig, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StockTesting_RunnerConfig, rhs: StockTesting_RunnerConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._jobID != rhs_storage._jobID {return false}
        if _storage._runnerID != rhs_storage._runnerID {return false}
        if _storage._sdkConfig != rhs_storage._sdkConfig {return false}
        if _storage._casesConfig != rhs_storage._casesConfig {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
